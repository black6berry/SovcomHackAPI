// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SovcomHackAPI.Models;

#nullable disable

namespace SovcomHackAPI.Migrations
{
    [DbContext(typeof(SovcomHackContext))]
    partial class SovcomHackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SovcomHackAPI.Models.Accident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasComment("ИД Категория травмоопасности");

                    b.Property<DateTime>("DateAccident")
                        .HasColumnType("datetime")
                        .HasComment("Дата происшествия");

                    b.Property<decimal>("GeoposionX")
                        .HasColumnType("decimal(5, 5)")
                        .HasComment("Координата по Ox");

                    b.Property<decimal>("GeoposionY")
                        .HasColumnType("decimal(5, 5)")
                        .HasComment("Координата по OY");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasComment("ИД сессии, когда произошло происшествие");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("ИД Пользователя");

                    b.Property<decimal>("ValueGet")
                        .HasColumnType("decimal(10, 2)")
                        .HasComment("Получаемое значение");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Accident", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.ActiveBag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("LastDateUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActiveBag", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.BankAccAvailable", b =>
                {
                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreditCardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("BankAccountId", "CreditCardId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("BankAccAvailable", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.BankAccountClient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CheckMoneyDataId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("ИД Клиента");

                    b.Property<decimal>("ValueMoney")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CheckMoneyDataId");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccountClient", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.CategoryAccident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Описание категории");

                    b.Property<string>("Effects")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Какие угрозы жизни");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Название категории");

                    b.Property<decimal>("RangeFrom")
                        .HasColumnType("decimal(5, 5)")
                        .HasComment("Диапазон ОТ");

                    b.Property<decimal>("RangeTo")
                        .HasColumnType("decimal(5, 5)")
                        .HasComment("Диапазон ДО");

                    b.HasKey("Id");

                    b.ToTable("CategoryAccident", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.CheckMoneyDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CheckMoneyData");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.CreditCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Cvv")
                        .HasColumnType("bigint")
                        .HasColumnName("CVV")
                        .HasComment("Код CVV");

                    b.Property<DateTime>("DateOfReceiving")
                        .HasColumnType("datetime")
                        .HasComment("Дата, до которой нужно карту обновить");

                    b.Property<long>("Day")
                        .HasColumnType("bigint")
                        .HasComment("День действителен ДО");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasComment("Номер карты");

                    b.Property<long>("TypeCardId")
                        .HasColumnType("bigint")
                        .HasComment("ИД типа карты (зарплатная, кредитная)");

                    b.Property<decimal>("ValueMoney")
                        .HasColumnType("decimal(10, 2)")
                        .HasComment("Объем денег на карте (Мы понимаем, что должен быть счет и должен быть привязана карта к нему, а деньги на счету, но чтобы сэкономить время - вы сразу деньги храним на карте)");

                    b.Property<long>("Year")
                        .HasColumnType("bigint")
                        .HasComment("Год действителен ДО");

                    b.HasKey("Id");

                    b.HasIndex("TypeCardId");

                    b.ToTable("CreditCard", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.LogHistoryOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BankAccountClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLoad")
                        .HasColumnType("bit");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ValueMoney")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountClientId");

                    b.HasIndex("OperationId");

                    b.HasIndex("UserId");

                    b.ToTable("LogHistoryOperation", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Operation", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Название роли");

                    b.Property<string>("NameFs")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("Name_FS")
                        .IsFixedLength()
                        .HasComment("Первая буква в названии роли");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.SessionUserBidding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Get")
                        .HasColumnType("bigint")
                        .HasComment("ИД Продукта компании");

                    b.Property<long>("TimeSpanActive")
                        .HasColumnType("bigint")
                        .HasComment("Время начала (момент, когда тумблер true)");

                    b.Property<long>("TimeSpanFinish")
                        .HasColumnType("bigint")
                        .HasComment("Время конца (момент, когда тумблер false)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("ИД Пользователя");

                    b.HasKey("Id")
                        .HasName("PK_SessionUser");

                    b.HasIndex("UserId");

                    b.ToTable("SessionUserBidding", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.TypeCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Тип карты");

                    b.HasKey("Id");

                    b.ToTable("TypeCard", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ИД");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Статус пользователя");

                    b.Property<DateTime>("LastConnect")
                        .HasColumnType("datetime")
                        .HasComment("Последнее подключение");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Логин пользователя");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Имя");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Пароль пользователя");

                    b.Property<string>("Patronomic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Отчество");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Телефон");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasComment("ИД роли пользователя");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Фамилия");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit")
                        .HasComment("Подтверждение аккаунта пользователя");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.ViewProductUserOnCard", b =>
                {
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Patronomic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.ToTable((string)null);

                    b.ToView("ViewProductUserOnCard", (string)null);
                });

            modelBuilder.Entity("SovcomHackAPI.Models.Accident", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.CategoryAccident", "Category")
                        .WithMany("Accidents")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Accident_CategoryAccident");

                    b.HasOne("SovcomHackAPI.Models.SessionUserBidding", "Session")
                        .WithMany("Accidents")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_Accident_SessionUser");

                    b.HasOne("SovcomHackAPI.Models.User", "User")
                        .WithMany("Accidents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Accident_User");

                    b.Navigation("Category");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.ActiveBag", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.User", "User")
                        .WithMany("ActiveBags")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ActiveBag_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.BankAccAvailable", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.BankAccountClient", "BankAccount")
                        .WithMany("BankAccAvailables")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankAccAvailable_BankAccountClient");

                    b.HasOne("SovcomHackAPI.Models.CreditCard", "CreditCard")
                        .WithMany("BankAccAvailables")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankAccAvailable_CreditCard");

                    b.Navigation("BankAccount");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.BankAccountClient", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.CheckMoneyDatum", "CheckMoneyData")
                        .WithMany("BankAccountClients")
                        .HasForeignKey("CheckMoneyDataId")
                        .IsRequired()
                        .HasConstraintName("FK_BankAccountClient_CheckMoneyData");

                    b.HasOne("SovcomHackAPI.Models.User", "User")
                        .WithMany("BankAccountClients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConnectedUserServices_User");

                    b.Navigation("CheckMoneyData");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.CreditCard", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.TypeCard", "TypeCard")
                        .WithMany("CreditCards")
                        .HasForeignKey("TypeCardId")
                        .IsRequired()
                        .HasConstraintName("FK_CreditCard_TypeCard");

                    b.Navigation("TypeCard");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.LogHistoryOperation", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.BankAccountClient", "BankAccountClient")
                        .WithMany("LogHistoryOperations")
                        .HasForeignKey("BankAccountClientId")
                        .IsRequired()
                        .HasConstraintName("FK_LogHistoryOperation_BankAccountClient");

                    b.HasOne("SovcomHackAPI.Models.Operation", "Operation")
                        .WithMany("LogHistoryOperations")
                        .HasForeignKey("OperationId")
                        .IsRequired()
                        .HasConstraintName("FK_LogHistoryOperation_Operation");

                    b.HasOne("SovcomHackAPI.Models.User", "User")
                        .WithMany("LogHistoryOperations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LogHistoryOperation_User");

                    b.Navigation("BankAccountClient");

                    b.Navigation("Operation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.SessionUserBidding", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.User", "User")
                        .WithMany("SessionUserBiddings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SessionUser_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.User", b =>
                {
                    b.HasOne("SovcomHackAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.BankAccountClient", b =>
                {
                    b.Navigation("BankAccAvailables");

                    b.Navigation("LogHistoryOperations");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.CategoryAccident", b =>
                {
                    b.Navigation("Accidents");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.CheckMoneyDatum", b =>
                {
                    b.Navigation("BankAccountClients");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.CreditCard", b =>
                {
                    b.Navigation("BankAccAvailables");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.Operation", b =>
                {
                    b.Navigation("LogHistoryOperations");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.SessionUserBidding", b =>
                {
                    b.Navigation("Accidents");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.TypeCard", b =>
                {
                    b.Navigation("CreditCards");
                });

            modelBuilder.Entity("SovcomHackAPI.Models.User", b =>
                {
                    b.Navigation("Accidents");

                    b.Navigation("ActiveBags");

                    b.Navigation("BankAccountClients");

                    b.Navigation("LogHistoryOperations");

                    b.Navigation("SessionUserBiddings");
                });
#pragma warning restore 612, 618
        }
    }
}
